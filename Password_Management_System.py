import os.path
import hashlib
import random
import string
from hashlib import new
import fileinput

passwordManager = "master.txt"
forgotPassQ = "forgotpass.txt"

#menu printing functions
def mainMenu():
    print("\n   -------------------------------\n")
    print("Welcome to Password Management System\n    --- A Project by Team 25 --- \n\n--------------------------------------\n")
    print("1 - Sign Up\n2 - Log in\n3 - Forgot Password\n4 - Quit\n")
def functionsOptionManu():
    print("Choose Your Option:")
    print("1 - Store a new password\n2 - View Password\n3 - Update Password\n4 - Password Generator\n5 - Strength Analysis\n6 - Quit\n")        
def storingMenu():
    print("\n    ---------------------------\n"
                "You're in storing new password mode\n"
                "------------------------------------\n")
def passUpdateMenu():
    print("\n   -------------------------\n"
                "You're in Password update mode!\n"
                "-------------------------------\n") 
def viewingMenu():
     print("\n    -------------------------\n"
                "You're in viewing password mode\n"
                "----------------------------------\n")
def passGenMenu():
    print(      "\n     ---------------------------\n"
                "You're in Random password Generator mode\n"
                "----------------------------------------\n")
def strengthAnalysisMenu():
    print(      "\n     ---------------------------\n"
                "You're in Password Strength Analysis mode\n"
                "----------------------------------------\n")
def quittingMenu():
    print("\n     ---------------------------\n"
                "Quitting the program... See you Again!\n"
                "-------------------------------------\n")
def signUpMenu():
    print("\nSign up!\n---------")
    print("[ATTENTION!!] If you already have an account, then Log in instead of Sign up")
    print("Signing up again would erase the previous existing passwords, if any\n")

#property functions       
def eraseData(fileName):
    file = open(fileName, 'r+')
    file.truncate(0)
    file.close()
    
def genpass():
    length = 15
    print("Do you want to include symbols(@ . - _) in your password? (Yes or No)")
    genFlag = str(input().lower())
    print()
    while (genFlag not in {'yes','no'}):
        print("Invalid input. Please input yes or no")
        genFlag = str(input().lower())
        print()
    if(genFlag == "yes"):
        symbol = "._-@"
        char = string.ascii_letters + string.digits + symbol
    else:
        char = string.ascii_letters + string.digits
    fdigit = random.choice(string.ascii_letters)
    rdigit = ''.join(random.choice(char) for i in range(length-1))
    while ((genFlag == "yes") and not(any(c in symbol for c in rdigit))): 
        rdigit = ''.join(random.choice(char) for i in range(length-1))
    global randpw 
    randpw = fdigit + rdigit

#function loop
def optionpage():
    quit = False
    while quit == False:
        functionsOptionManu()
        userChoice = int(input("Option: "))
        while (userChoice>6 or userChoice<1):
            print("\n   Input is out of range\nPlease Choose 1,2,3,4,5 or 6 only!")
            userChoice = int(input("Option: "))      
        if (userChoice == 1):
            storingMenu()
            numberOfnew = int(input("Number of passwords, you want to store: "))
            for i in range(0,numberOfnew):
                create_file()
        if (userChoice == 2):
            viewingMenu()
            readPasswords()           
        if (userChoice == 3):
            passUpdateMenu() 
            update_file()         
        if (userChoice == 4):
            passGenMenu()
            genpass()   
            print("Password Generated by Program is:", randpw)
            print("This passowrd is VERY STRONG, you might want to use it for amy website. Cheers!")
            print()
        if (userChoice == 5):
            strengthAnalysisMenu()
            spw = str(input("Enter a password to know its strength: "))
            print(password_strength(spw))            
        if (userChoice == 6):
            quittingMenu()
            quit = True
            break

#password strength analysis
def password_strength(pw: str):
    more_than_8 = len(pw) >= 8
    has_symbol = False
    has_uppercase = False
    has_number = False
    number_of_true = 0

    symbol = ["!", "@" ,"," , ".", ":", ";", "#", "$", "%", "^", "&", "*", "(", ")", "-", "_", "~", "+", "=", "/", "[", "]", "{", "}", "\\", "|", "'", '"', "?", ">", "<"]

    for char in pw:
        if char >= "A" and char <= "Z":
            has_uppercase = True
        elif char in symbol:
            has_symbol = True
        elif char >= "0" and char <= "9":
            has_number = True 

    if has_uppercase:
        number_of_true += 1
    if has_symbol:
        number_of_true += 1
    if has_number:
        number_of_true += 1
    if more_than_8:
        number_of_true += 1

    if number_of_true == 4:
        return "Very Strong"
    if number_of_true == 3:
        return "Strong"
    if number_of_true == 2:
        return "Weak"
    if number_of_true <= 1:
        return "Very Weak" 

#Set up                 
def createNewMasterPassword(masterPassword):
    if os.path.exists(passwordManager):
        eraseData(passwordManager)
        file = open(passwordManager, 'w')
        file.write("Password storing with master password\n")
        file.write("Master Passowrd encrypted for security\n")
        file.write("------------------------------------\n")
        hash = hashlib.sha512((masterPassword).encode('utf-8')).hexdigest()
        file.write("%s\n" % hash)
        file.close()
    else:
        file = open(passwordManager, 'w')
        file.write("Password storing with master password\n")
        file.write("Master Passowrd encrypted for security\n")
        file.write("------------------------------------\n")
        hash = hashlib.sha512((masterPassword).encode('utf-8')).hexdigest()
        file.write("%s\n" % hash)
        file.close()  

#store new password
def create_file():
    GENFlag = str(input("Do you need to generate password automatically? (Yes or No): ").lower())
    while (GENFlag not in {'yes','no','y','n'}):
        print("Invalid input. Please input yes or no")
        GENFlag = str(input().lower())
    
    #automatically generate password for users
    if(GENFlag == "yes"):
        print()
        web = str(input('Please enter the website: ').lower())
        id = str(input('Please enter the ID: '))
        genpass()
        pswd = str(print("Your generated password is:", randpw))
        print("Password Analysis: Very Strong")
        f = open(web + id + '.txt', 'w')
        f.write(web, id, pswd)
    else:
        web = str(input('Please enter the website: ').lower())
        id = str(input('Please enter the ID: '))
        pswd = str(input('Please enter the password: '))
        f = open(web + id + '.txt', 'w')
        f.write(pswd)  

    #replace if duplicate file is found
    if os.path.exists(passwordManager):
        f = open(web + id + '.txt', 'w')
        eraseData(web + id + '.txt')
        f.write(pswd)
        f.close()
    else:
        f = open(web + id + '.txt', 'w')
        f.write(pswd)
        f.close()   

    print()
    print("Password Stored Successfully")
    print()

#update the password
def update_file():
    inputweb = str.lower(input('Please input the website of the password you would like to update: '))
    inputID = str(input('PLease input the ID of the password you would like to update: '))
    if os.path.isfile(inputweb + inputID + '.txt'):
        f = open(inputweb + inputID + '.txt', 'r')
        data = f.read()
        print(data)
        f.close()
        print("Do you want to modify this file? (Yes or No)")
        confirmFlag = str.lower(input())
        while (confirmFlag not in {'yes','no'}):
            print("Invalid input. Please input yes or no")
            confirmFlag = str.lower(input()) 
        if (confirmFlag == "yes"):
            f = open(inputweb + inputID + '.txt', 'w')
            newpw = input("Please enter the new password: ")
            f.write(newpw)
            print('The password is saved successfully')
            f.close
        else:
            optionpage()
    else:
        print('Sorry. Your file is not found.')
        optionpage()

#master password validation
def compareMaster(masterPassword):              
    master = open(passwordManager)
    masterLines = master.read().splitlines()
    hash = hashlib.sha512((masterPassword).encode('utf-8')).hexdigest()
    if (hash == masterLines[3]):
        return True
    else:
        return False

#view passwords        
def readPasswords():
    inputweb = str(input('Please input the website: ').lower())
    inputID = str(input('Please input the ID: ').lower())
    if os.path.isfile(inputweb + inputID + '.txt'):
        file = open(inputweb + inputID + '.txt', 'r')
        pw = file.read()
        file.close()
        print('Website: ',inputweb)
        print('username: ', inputID)
        print('Password: ', pw)
        print('Strength of your password: ', password_strength(pw))
        print('\n')
        optionpage()
    else:
        print('Sorry your file was not found.')
        optionpage()

#log in    
def log_In():
    print("\nLog in!\n---------")
    masterPass = input("Input Master Password: ")
    print()
    
    flag = compareMaster(masterPass)
    wFlag = 0
    if (flag == False):
        print("NOTE: If you enter Master password wrong 5 times, your account will be locked")
        print("In that case, you will have to re-run the program and select 'Forgot Password' to reset your password") 
    while(flag == False):
        wFlag += 1
        print("Wrong Master Password. Try Again!") 
        masterPass = input("Input Master Password: ")
        flag = compareMaster(masterPass)
        if (wFlag == 5):
            print("Password Attempts finished. Your account is locked")
            print(" -------------Quitting the program-------------")
    if (flag == True):       
        optionpage()  

#file set up
def createNewForgotPassFile():
    if os.path.exists(forgotPassQ):
        eraseData(forgotPassQ)
        file = open(forgotPassQ, 'w')
        file.close()
    else:
        file = open(forgotPassQ, 'w')
        file.close()

#forgot pass in new file
def forgotPasswordQuestions():    
    createNewForgotPassFile()
    file = open(forgotPassQ, 'w')
    supplementaryQ_one = input("Your father's last name?: ").lower()
    supplementaryQ_two = input("Your favourite animal?: ").lower()
    file.write("Security Question One\n")
    file.write("Answer encrypted for security\n")
    file.write("------------------------------------\n")
    hashOne = hashlib.sha512((supplementaryQ_one).encode('utf-8')).hexdigest()
    file.write("%s\n" % hashOne)
    file.write("------------------------------------\n")
    file.write("Security Question Two\n")
    file.write("Answer encrypted for security\n")
    file.write("------------------------------------\n")
    hashTwo = hashlib.sha512((supplementaryQ_two).encode('utf-8')).hexdigest()
    file.write("%s\n" % hashTwo)
    file.write("------------------------------------\n\n")
    file.close()

#forgot pass compare
def securityQuestionsCompare(supplementaryQ_one,supplementaryQ_two):
    master = open(forgotPassQ)
    masterLines = master.read().splitlines()
    hash_one = hashlib.sha512((supplementaryQ_one).encode('utf-8')).hexdigest()
    hash_two = hashlib.sha512((supplementaryQ_two).encode('utf-8')).hexdigest()
    if (hash_one == masterLines[3]):
        if (hash_two == masterLines[8]):
            return True
        return False;
    else:
        return False

#main
def main():
    mainMenu()
    userSystem = int(input("Option: "))
    
    #validation
    while (userSystem>4 or userSystem<1):
        print("\n   Input is out of range\nPlease Choose 1,2,3 or 4 only!")
        userSystem = int(input("Option: "))
    
    if (userSystem == 1):
        signUpMenu()
        signUpFlag = str(input("Do you want to make a new account? (Yes or No): ").lower())
        while (signUpFlag not in {'yes','no'}):
            signUpFlag = str(input("Invalid input. Please input yes or no").lower())
        
        if (signUpFlag == "yes"):
            print()
            print("A Master Password is needed to make a new account for Password Management")
            print("----Would you like you generate a password automatically? (Yes or No)----")
            GenPassFlag = str(input().lower())
            while (GenPassFlag not in {'yes','no'}):
                print("Invalid input. Please input yes or no")
                GenPassFlag = str(input().lower())
                   
            #get the master password    
            if(GenPassFlag == "yes"):
                genpass()
                confirmMasterPass = randpw
                masterPass = randpw
                print ("The generated Master Password is:",randpw)
            else:
                print()
                masterPass = input("Input your Own New Master Password: ")
                confirmMasterPass = input("Confirm your New Master Password: ")
                print()
                
                #validation
                while(masterPass != confirmMasterPass):
                    print("Passwords do not match. Try again!")
                    masterPass = input("Input your Own New Master Password: ")
                    confirmMasterPass = input("Confirm your New Master Password: ")
            
            #execute
            if (masterPass == confirmMasterPass):
                print("Please answer few supplementary questions in case you forget the master password\n")
                forgotPasswordQuestions()
                print()
                print("Creating master file...\n Master file created!\n----------------------\n")
                createNewMasterPassword(masterPass)
                optionpage()

        else:
            logInFlag = str(input("Do you want to Log-In instead? (Yes or No): ").lower())
            while (logInFlag not in {'yes','no','y','n'}):
                print("Invalid input. Please input yes or no")
                signUpFlag = str(input().lower())
            if(logInFlag == "yes"):
                log_In()
            else:
                quittingMenu()

    if (userSystem == 2):
        log_In()
        
    if (userSystem == 3):
        print("Forgot your Master Password? No problem!"
              "Just answer the ssecurity questions below"
              "to reset your master password.")
        supplementaryQ_one = input("Your father's last name?: ").lower()
        supplementaryQ_two = input("Your favourite animal?: ").lower()
        print()
        
        flag = securityQuestionsCompare(supplementaryQ_one,supplementaryQ_two)
        
        if (flag == True):
            print("Security Question Answers were correct!")
            print("You can reset your password now. Your existing passwords will be saved")
            resetMaster = input("Input your new Master Password: ")
            resetMasterConfirm = input("Confirm new Master Password: ")
            if(resetMaster == resetMasterConfirm):         
                with open(passwordManager,'r') as file:
                    changeMaster = file.readlines()             
                hash = str(hashlib.sha512((resetMaster).encode('utf-8')).hexdigest())
                changeMaster[3] = hash             
                with open(passwordManager, 'w') as file:
                    file.writelines(changeMaster)
                    file.close()      
                print()             
            print("Master Password updated. You may re-run Password Management program now and log in")
            print("-------------------------------Quitting Program------------------------------------")
         
    if (userSystem == 4):
        quittingMenu()

main()
